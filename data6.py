# -*- coding: utf-8 -*-
"""Data6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IOKG9d8Ij3NoSb86I46ZsRpTS5HuKcGO
"""

import numpy as np  #array operation
import pandas as pd  # dataset operation

from google.colab import files
uploaded= files.upload()

dataSet = pd.read_csv('MOCK_DATA (2).csv')
print(dataSet)

#mapping data set..male to 1 and femail to 0
originalSexDataSet=dataSet['sex']
print(originalSexDataSet)
dataSet['sex']=dataSet['sex'].map({'Female':0,'Male':1}).astype(int)
print(dataSet['sex'])

#mapping  survived Data 
original_survived_dataSet =dataSet['survived']
print(original_survived_dataSet)

"""Convert Bool to type int"""

dataSet['survived']=dataSet['survived'].astype(int)
print(dataSet['survived'])

print(dataSet)

#assing survived column to new dataSet for later use
new_survived =dataSet['survived']
print(new_survived)

# Drop survived column 
X=dataSet.drop('survived',axis='columns')
print(X)

#Y as survived
Y=new_survived
print(Y)

#checking for null value in feathures data set
X.columns[X.isna().any()]

#checking null values for Survival data set 
Y.isna().any()

#split data set into train and test
from sklearn.model_selection import train_test_split 
X_train,X_test,y_train,y_test =   train_test_split(X,Y,test_size=0.25,random_state=0)

print(X_train)

print(y_train)

param_grid_nb = {
    'var_smoothing': np.logspace(0,-9, num=100)
}

# import model gussianMB and train model with out train data set
from sklearn.naive_bayes import GaussianNB
from sklearn.model_selection import GridSearchCV
nbModel_grid = GridSearchCV(estimator=GaussianNB(), param_grid=param_grid_nb, verbose=1, cv=10, n_jobs=-1)
#model=GaussianNB()
nbModel_grid.fit(X_train,y_train)

"""Start prediction based on values """

getPclass =int(input('Please Enter PClass'))
getSex=int(input('Please enter Sex- 1 for male, 0-for female'))
age=int(input('enter age ---int between 1-80'))
fare=float(input('Enter fare as float value'))
persons=[[getPclass,getSex,age,fare]]
result=model.predict(persons)
print(result)
if result==1:
  print('This person will survive')
else:
  print('this person will die')

#test model accuracy with out test data
from sklearn.metrics import balanced_accuracy_score
y_pred = nbModel_grid.predict(X_test)

print(np.column_stack((y_pred,y_test)))

from sklearn.metrics import balanced_accuracy_score
print('Accuracy of the model is : {0}%'.format(balanced_accuracy_score(y_test,y_pred)*100))